Part 2 Discussion: We would write a program that would always print the fizz-buzz values for 1 to 17. This could be done by writing 17 system.out.println() statements in the main method. You would manually have to figure out what numbers would be replaced with words and which words are the correct ones to replace them with. You would then start the first print statement with the value for 1 then move down in sequential until you end with the output for 17.

Part 3 Discussion: We could have run the program several times without the tester suite, testing all the given numbers on their own through a command line argument and manually confirmed if the numbers were correct or not.
Part 4 Discussion: It doesn't really matter, but the list simplifies the process. Using a list allows us to use the add method. We do not need to set the length of the list before we start adding elements to the list. This way this list can be instantiated the same way for each test case and the add method can be used to append the list when a new element must be added. This limits the likelihood of running into index out of bound errors when we are running and testing the program. We specifically need to use an array list for this part of the project. It does not makke sense to use another type of list like a set or map where we would need a key to access each element of the list. Using an array list is simple and limits the steps needed for the tester. In the tester we had to change the assertion method to just assertEquals instead of assertArrayEquals. WE also had to add a step in our tester to fill the list before comparing the two lists rather than instantiate the array with our values when we declared the array.